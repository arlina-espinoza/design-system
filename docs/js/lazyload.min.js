/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./stories/assets/js/lazyload.js":
/*!***************************************!*\
  !*** ./stories/assets/js/lazyload.js ***!
  \***************************************/
/***/ (() => {

eval("window.onload = function () {\n  const lazyClass = \"lazy\";\n  const lazyImg = \"img.\" + lazyClass;\n  const lazyPicture = \"picture.\" + lazyClass;\n\n  if (document.querySelectorAll(lazyImg) !== null && document.querySelectorAll(lazyPicture) !== null) {\n    // Incase of img tag.\n    let lazyImages = [].slice.call(document.querySelectorAll(lazyImg)); // Incase of picture tag.\n\n    let lazyPictures = [].slice.call(document.querySelectorAll(lazyPicture)); // Check to see if browser supports 'IntersectionObserver' property.\n\n    if (\"IntersectionObserver\" in window) {\n      // Set the 'rootMargin' parameter (works as standard CSS margin rule),\n      // to increase the effective bounding box that is considered to find the \"intersection\".\n      const config = {\n        // If the image gets within 300px of the browser's viewport, start the download:\n        rootMargin: \"300px 0px\"\n      }; // Create the intersection observer by calling its constructor and passing it a\n      // callback function to be run whenever a threshold is crossed in one direction or the other:\n\n      let lazyImageObserver = new IntersectionObserver(function (entries, observer) {\n        entries.forEach(function (entry) {\n          if (entry.isIntersecting) {\n            let lazyImage = entry.target;\n\n            if (!lazyImage.classList.contains(\"lazyloaded\")) {\n              // Incase of picture tag we also change the srcset and add lazyloaded class to picture tag.\n              if (lazyImage.nodeName === \"PICTURE\") {\n                const picSource = lazyImage.querySelectorAll(\"source\");\n                const picImg = lazyImage.querySelector(\"img\");\n                picSource.forEach(source => {\n                  source.srcset = source.dataset.srcset;\n                });\n                picImg.src = picImg.dataset.src;\n                picImg.style.opacity = 1;\n              } else {\n                lazyImage.src = lazyImage.dataset.src;\n                lazyImage.style.opacity = 1;\n              }\n\n              lazyImageObserver.unobserve(lazyImage);\n              lazyImage.classList.remove(lazyClass);\n              lazyImage.classList.add(\"lazyloaded\");\n            }\n          }\n        });\n      }, config);\n      lazyImages.forEach(function (lazyImage) {\n        if (!lazyImage.classList.contains(\"lazyloaded\")) {\n          // The callback we setup for the observer will be executed now for the first time.\n          lazyImageObserver.observe(lazyImage);\n          lazyImage.style.cssText = \"opacity: 0; transition: opacity 1s ease\";\n        }\n      });\n      lazyPictures.forEach(function (lazyPic) {\n        if (!lazyPic.classList.contains(\"lazyloaded\")) {\n          // The callback we setup for the observer will be executed now for the first time.\n          lazyImageObserver.observe(lazyPic);\n          lazyPic.querySelector(\"img\").style.cssText = \"opacity: 0; transition: opacity 1s ease\";\n        }\n      });\n    } else {\n      // For browsers that don't support IntersectionObserver yet,\n      // load all the images now:\n      lazyImages.forEach(function (lazyImage) {\n        lazyImage.src = lazyImage.dataset.src;\n        lazyImage.classList.remove(lazyClass);\n        lazyImage.classList.add(\"nolazy\");\n      });\n      lazyPictures.forEach(function (lazyPic) {\n        const picSource = lazyPic.querySelectorAll(\"source\");\n        const picImg = lazyPic.querySelector(\"img\");\n        picSource.forEach(function (lazySource) {\n          lazySource.srcset = picImg.dataset.srcset;\n        });\n        picImg.src = picImg.dataset.src;\n        lazyPic.classList.remove(lazyClass);\n        lazyPic.classList.add(\"nolazy\");\n      });\n    }\n  }\n};\n\n//# sourceURL=webpack://design-system-undp/./stories/assets/js/lazyload.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./stories/assets/js/lazyload.js"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});